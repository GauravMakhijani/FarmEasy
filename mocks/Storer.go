// Code generated by mockery v2.19.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "FarmEasy/domain"

	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// AddBooking provides a mock function with given fields: _a0, _a1
func (_m *Storer) AddBooking(_a0 context.Context, _a1 domain.Booking) (uint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, domain.Booking) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Booking) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddMachine provides a mock function with given fields: _a0, _a1
func (_m *Storer) AddMachine(_a0 context.Context, _a1 *domain.MachineResponse) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.MachineResponse) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BookSlot provides a mock function with given fields: _a0, _a1
func (_m *Storer) BookSlot(_a0 context.Context, _a1 domain.Slot) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Slot) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenrateInvoice provides a mock function with given fields: _a0, _a1
func (_m *Storer) GenrateInvoice(_a0 context.Context, _a1 domain.Invoice) (uint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, domain.Invoice) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Invoice) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBookings provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetAllBookings(_a0 context.Context, _a1 uint) ([]domain.BookingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []domain.BookingResponse
	if rf, ok := ret.Get(0).(func(context.Context, uint) []domain.BookingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BookingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseCharge provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetBaseCharge(_a0 context.Context, _a1 uint) (uint, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, uint) uint); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookedSlot provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) GetBookedSlot(_a0 context.Context, _a1 uint, _a2 string) (map[uint]struct{}, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 map[uint]struct{}
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) map[uint]struct{}); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint]struct{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMachines provides a mock function with given fields: _a0
func (_m *Storer) GetMachines(_a0 context.Context) ([]domain.MachineResponse, error) {
	ret := _m.Called(_a0)

	var r0 []domain.MachineResponse
	if rf, ok := ret.Get(0).(func(context.Context) []domain.MachineResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MachineResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmptySlot provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Storer) IsEmptySlot(_a0 context.Context, _a1 uint, _a2 uint, _a3 string) bool {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, string) bool); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LoginFarmer provides a mock function with given fields: _a0, _a1, _a2
func (_m *Storer) LoginFarmer(_a0 context.Context, _a1 string, _a2 string) (uint, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uint); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterFarmer provides a mock function with given fields: _a0, _a1
func (_m *Storer) RegisterFarmer(_a0 context.Context, _a1 *domain.FarmerResponse) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FarmerResponse) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorer(t mockConstructorTestingTNewStorer) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
